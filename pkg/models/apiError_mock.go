// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/models/apiError.go

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApiError is a mock of ApiError interface
type MockApiError struct {
	ctrl     *gomock.Controller
	recorder *MockApiErrorMockRecorder
}

// MockApiErrorMockRecorder is the mock recorder for MockApiError
type MockApiErrorMockRecorder struct {
	mock *MockApiError
}

// NewMockApiError creates a new mock instance
func NewMockApiError(ctrl *gomock.Controller) *MockApiError {
	mock := &MockApiError{ctrl: ctrl}
	mock.recorder = &MockApiErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiError) EXPECT() *MockApiErrorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockApiError) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockApiErrorMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockApiError)(nil).Error))
}

// StatusCode mocks base method
func (m *MockApiError) StatusCode() int {
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode
func (mr *MockApiErrorMockRecorder) StatusCode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockApiError)(nil).StatusCode))
}

// ErrorBody mocks base method
func (m *MockApiError) ErrorBody() ApiErrorBody {
	ret := m.ctrl.Call(m, "ErrorBody")
	ret0, _ := ret[0].(ApiErrorBody)
	return ret0
}

// ErrorBody indicates an expected call of ErrorBody
func (mr *MockApiErrorMockRecorder) ErrorBody() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorBody", reflect.TypeOf((*MockApiError)(nil).ErrorBody))
}
